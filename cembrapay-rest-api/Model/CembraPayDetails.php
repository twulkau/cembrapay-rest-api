<?php
/**
 * CembraPayDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CembraPay\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transactions Gateway Microservice API
 *
 * Public JSON API integration and operations
 *
 * OpenAPI spec version: 1.0
 * Contact: integration@cembrapay.ch
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CembraPay\RestApi\Model;

use \ArrayAccess;
use \CembraPay\RestApi\ObjectSerializer;

/**
 * CembraPayDetails Class Doc Comment
 *
 * @category Class
 * @description Details, specific to chosen CembraPay payment method.
 * @package  CembraPay\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CembraPayDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CembraPayDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cembra_pay_payment_method' => 'string',
        'requested_credit_limit' => 'double',
        'invoice_delivery_type' => '\CembraPay\RestApi\Model\InvoiceDeliveryType',
        'first_installment_amount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cembra_pay_payment_method' => null,
        'requested_credit_limit' => 'double',
        'invoice_delivery_type' => null,
        'first_installment_amount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cembra_pay_payment_method' => 'cembraPayPaymentMethod',
        'requested_credit_limit' => 'requestedCreditLimit',
        'invoice_delivery_type' => 'invoiceDeliveryType',
        'first_installment_amount' => 'firstInstallmentAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cembra_pay_payment_method' => 'setCembraPayPaymentMethod',
        'requested_credit_limit' => 'setRequestedCreditLimit',
        'invoice_delivery_type' => 'setInvoiceDeliveryType',
        'first_installment_amount' => 'setFirstInstallmentAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cembra_pay_payment_method' => 'getCembraPayPaymentMethod',
        'requested_credit_limit' => 'getRequestedCreditLimit',
        'invoice_delivery_type' => 'getInvoiceDeliveryType',
        'first_installment_amount' => 'getFirstInstallmentAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cembra_pay_payment_method'] = isset($data['cembra_pay_payment_method']) ? $data['cembra_pay_payment_method'] : null;
        $this->container['requested_credit_limit'] = isset($data['requested_credit_limit']) ? $data['requested_credit_limit'] : null;
        $this->container['invoice_delivery_type'] = isset($data['invoice_delivery_type']) ? $data['invoice_delivery_type'] : null;
        $this->container['first_installment_amount'] = isset($data['first_installment_amount']) ? $data['first_installment_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cembra_pay_payment_method
     *
     * @return string
     */
    public function getCembraPayPaymentMethod()
    {
        return $this->container['cembra_pay_payment_method'];
    }

    /**
     * Sets cembra_pay_payment_method
     *
     * @param string $cembra_pay_payment_method Type of CembraPay product. Always required for requests of type REG and SCR.  Also is required for requests of type AUT, when token is not provided. List of product types (can be extended by new products): - SINGLE-INVOICE - SINGLE-INVOICE-RISKONMERCHANT - CEMBRAPAY-INVOICE - CEMBRAPAY-INVOICE-RISKONMERCHANT - INSTALLMENT_3 - INSTALLMENT_4 - INSTALLMENT_6 - INSTALLMENT_12 - INSTALLMENT_24 - INSTALLMENT_36 - INSTALLMENT_48 - INSTALLMENT_3-RISKONMERCHANT - INSTALLMENT_4-RISKONMERCHANT - INSTALLMENT_6-RISKONMERCHANT - INSTALLMENT_12-RISKONMERCHANT - INSTALLMENT_24-RISKONMERCHANT - INSTALLMENT_36-RISKONMERCHANT - INSTALLMENT_48-RISKONMERCHANT - WALLET - CPMI
     *
     * @return $this
     */
    public function setCembraPayPaymentMethod($cembra_pay_payment_method)
    {
        $this->container['cembra_pay_payment_method'] = $cembra_pay_payment_method;

        return $this;
    }

    /**
     * Gets requested_credit_limit
     *
     * @return double
     */
    public function getRequestedCreditLimit()
    {
        return $this->container['requested_credit_limit'];
    }

    /**
     * Sets requested_credit_limit
     *
     * @param double $requested_credit_limit Optional amount of requested credit limit, which should be taken into account during Consumer onboarding (for new Consumers)
     *
     * @return $this
     */
    public function setRequestedCreditLimit($requested_credit_limit)
    {
        $this->container['requested_credit_limit'] = $requested_credit_limit;

        return $this;
    }

    /**
     * Gets invoice_delivery_type
     *
     * @return \CembraPay\RestApi\Model\InvoiceDeliveryType
     */
    public function getInvoiceDeliveryType()
    {
        return $this->container['invoice_delivery_type'];
    }

    /**
     * Sets invoice_delivery_type
     *
     * @param \CembraPay\RestApi\Model\InvoiceDeliveryType $invoice_delivery_type invoice_delivery_type
     *
     * @return $this
     */
    public function setInvoiceDeliveryType($invoice_delivery_type)
    {
        $this->container['invoice_delivery_type'] = $invoice_delivery_type;

        return $this;
    }

    /**
     * Gets first_installment_amount
     *
     * @return int
     */
    public function getFirstInstallmentAmount()
    {
        return $this->container['first_installment_amount'];
    }

    /**
     * Sets first_installment_amount
     *
     * @param int $first_installment_amount Optional field, is only accepted if configuration setup to allow usage of this field. Can be used in special cases when defined first payment amount was agreed with customer. Amount in smallest money unit for the Currency (cents for CHF)
     *
     * @return $this
     */
    public function setFirstInstallmentAmount($first_installment_amount)
    {
        $this->container['first_installment_amount'] = $first_installment_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
