<?php
/**
 * ScreeningRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CembraPay\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transactions Gateway Microservice API
 *
 * Public JSON API integration and operations
 *
 * OpenAPI spec version: 1.0
 * Contact: integration@cembrapay.ch
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CembraPay\RestApi\Model;

use \ArrayAccess;
use \CembraPay\RestApi\ObjectSerializer;

/**
 * ScreeningRequest Class Doc Comment
 *
 * @category Class
 * @package  CembraPay\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScreeningRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScreeningRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_msg_id' => 'string',
        'request_msg_date_time' => '\DateTime',
        'idempotency_key' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'token' => 'string',
        'cust_auth' => '\CembraPay\RestApi\Model\CustAuth',
        'billing_addr' => '\CembraPay\RestApi\Model\BillingAddr',
        'cust_contacts' => '\CembraPay\RestApi\Model\CustContacts',
        'delivery_details' => '\CembraPay\RestApi\Model\DeliveryDetails',
        'merchant_order_ref' => 'string',
        'psp_transaction_id' => 'string',
        'order' => '\CembraPay\RestApi\Model\Order',
        'session_info' => '\CembraPay\RestApi\Model\SessionInfo',
        'cembra_pay_details' => '\CembraPay\RestApi\Model\CembraPayDetails',
        'merchant_details' => '\CembraPay\RestApi\Model\ScreeningMerchantDetails',
        'customer_consents' => '\CembraPay\RestApi\Model\ScreeningCustomerConsent[]',
        'cust_details' => '\CembraPay\RestApi\Model\RequiredCustDetails',
        'msg_extensions' => '\CembraPay\RestApi\Model\MsgExtension[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_msg_id' => 'uuid',
        'request_msg_date_time' => 'date-time',
        'idempotency_key' => null,
        'amount' => 'int32',
        'currency' => null,
        'token' => null,
        'cust_auth' => null,
        'billing_addr' => null,
        'cust_contacts' => null,
        'delivery_details' => null,
        'merchant_order_ref' => null,
        'psp_transaction_id' => null,
        'order' => null,
        'session_info' => null,
        'cembra_pay_details' => null,
        'merchant_details' => null,
        'customer_consents' => null,
        'cust_details' => null,
        'msg_extensions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_msg_id' => 'requestMsgId',
        'request_msg_date_time' => 'requestMsgDateTime',
        'idempotency_key' => 'idempotencyKey',
        'amount' => 'amount',
        'currency' => 'currency',
        'token' => 'token',
        'cust_auth' => 'custAuth',
        'billing_addr' => 'billingAddr',
        'cust_contacts' => 'custContacts',
        'delivery_details' => 'deliveryDetails',
        'merchant_order_ref' => 'merchantOrderRef',
        'psp_transaction_id' => 'pspTransactionId',
        'order' => 'order',
        'session_info' => 'sessionInfo',
        'cembra_pay_details' => 'cembraPayDetails',
        'merchant_details' => 'merchantDetails',
        'customer_consents' => 'customerConsents',
        'cust_details' => 'custDetails',
        'msg_extensions' => 'msgExtensions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_msg_id' => 'setRequestMsgId',
        'request_msg_date_time' => 'setRequestMsgDateTime',
        'idempotency_key' => 'setIdempotencyKey',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'token' => 'setToken',
        'cust_auth' => 'setCustAuth',
        'billing_addr' => 'setBillingAddr',
        'cust_contacts' => 'setCustContacts',
        'delivery_details' => 'setDeliveryDetails',
        'merchant_order_ref' => 'setMerchantOrderRef',
        'psp_transaction_id' => 'setPspTransactionId',
        'order' => 'setOrder',
        'session_info' => 'setSessionInfo',
        'cembra_pay_details' => 'setCembraPayDetails',
        'merchant_details' => 'setMerchantDetails',
        'customer_consents' => 'setCustomerConsents',
        'cust_details' => 'setCustDetails',
        'msg_extensions' => 'setMsgExtensions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_msg_id' => 'getRequestMsgId',
        'request_msg_date_time' => 'getRequestMsgDateTime',
        'idempotency_key' => 'getIdempotencyKey',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'token' => 'getToken',
        'cust_auth' => 'getCustAuth',
        'billing_addr' => 'getBillingAddr',
        'cust_contacts' => 'getCustContacts',
        'delivery_details' => 'getDeliveryDetails',
        'merchant_order_ref' => 'getMerchantOrderRef',
        'psp_transaction_id' => 'getPspTransactionId',
        'order' => 'getOrder',
        'session_info' => 'getSessionInfo',
        'cembra_pay_details' => 'getCembraPayDetails',
        'merchant_details' => 'getMerchantDetails',
        'customer_consents' => 'getCustomerConsents',
        'cust_details' => 'getCustDetails',
        'msg_extensions' => 'getMsgExtensions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_msg_id'] = isset($data['request_msg_id']) ? $data['request_msg_id'] : null;
        $this->container['request_msg_date_time'] = isset($data['request_msg_date_time']) ? $data['request_msg_date_time'] : null;
        $this->container['idempotency_key'] = isset($data['idempotency_key']) ? $data['idempotency_key'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['cust_auth'] = isset($data['cust_auth']) ? $data['cust_auth'] : null;
        $this->container['billing_addr'] = isset($data['billing_addr']) ? $data['billing_addr'] : null;
        $this->container['cust_contacts'] = isset($data['cust_contacts']) ? $data['cust_contacts'] : null;
        $this->container['delivery_details'] = isset($data['delivery_details']) ? $data['delivery_details'] : null;
        $this->container['merchant_order_ref'] = isset($data['merchant_order_ref']) ? $data['merchant_order_ref'] : null;
        $this->container['psp_transaction_id'] = isset($data['psp_transaction_id']) ? $data['psp_transaction_id'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['session_info'] = isset($data['session_info']) ? $data['session_info'] : null;
        $this->container['cembra_pay_details'] = isset($data['cembra_pay_details']) ? $data['cembra_pay_details'] : null;
        $this->container['merchant_details'] = isset($data['merchant_details']) ? $data['merchant_details'] : null;
        $this->container['customer_consents'] = isset($data['customer_consents']) ? $data['customer_consents'] : null;
        $this->container['cust_details'] = isset($data['cust_details']) ? $data['cust_details'] : null;
        $this->container['msg_extensions'] = isset($data['msg_extensions']) ? $data['msg_extensions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_msg_id'] === null) {
            $invalidProperties[] = "'request_msg_id' can't be null";
        }
        if ($this->container['request_msg_date_time'] === null) {
            $invalidProperties[] = "'request_msg_date_time' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['customer_consents'] === null) {
            $invalidProperties[] = "'customer_consents' can't be null";
        }
        if ($this->container['cust_details'] === null) {
            $invalidProperties[] = "'cust_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_msg_id
     *
     * @return string
     */
    public function getRequestMsgId()
    {
        return $this->container['request_msg_id'];
    }

    /**
     * Sets request_msg_id
     *
     * @param string $request_msg_id Unique Id of the request
     *
     * @return $this
     */
    public function setRequestMsgId($request_msg_id)
    {
        $this->container['request_msg_id'] = $request_msg_id;

        return $this;
    }

    /**
     * Gets request_msg_date_time
     *
     * @return \DateTime
     */
    public function getRequestMsgDateTime()
    {
        return $this->container['request_msg_date_time'];
    }

    /**
     * Sets request_msg_date_time
     *
     * @param \DateTime $request_msg_date_time DateTime of the request. ISO8601 Date with time in format 'yyyy-MM-ddTHH:mm:ssZ'.
     *
     * @return $this
     */
    public function setRequestMsgDateTime($request_msg_date_time)
    {
        $this->container['request_msg_date_time'] = $request_msg_date_time;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey()
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Idempotency key, to unique identify operation and support consistent retries
     *
     * @return $this
     */
    public function setIdempotencyKey($idempotency_key)
    {
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount must be in smallest money unit for the Currency (cents for CHF)
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency, ISO4217 3 letters
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Id of Token can be provided instead or together with Customer details. Token is supported only for CPMI or WALLET payment methods.
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets cust_auth
     *
     * @return \CembraPay\RestApi\Model\CustAuth
     */
    public function getCustAuth()
    {
        return $this->container['cust_auth'];
    }

    /**
     * Sets cust_auth
     *
     * @param \CembraPay\RestApi\Model\CustAuth $cust_auth cust_auth
     *
     * @return $this
     */
    public function setCustAuth($cust_auth)
    {
        $this->container['cust_auth'] = $cust_auth;

        return $this;
    }

    /**
     * Gets billing_addr
     *
     * @return \CembraPay\RestApi\Model\BillingAddr
     */
    public function getBillingAddr()
    {
        return $this->container['billing_addr'];
    }

    /**
     * Sets billing_addr
     *
     * @param \CembraPay\RestApi\Model\BillingAddr $billing_addr billing_addr
     *
     * @return $this
     */
    public function setBillingAddr($billing_addr)
    {
        $this->container['billing_addr'] = $billing_addr;

        return $this;
    }

    /**
     * Gets cust_contacts
     *
     * @return \CembraPay\RestApi\Model\CustContacts
     */
    public function getCustContacts()
    {
        return $this->container['cust_contacts'];
    }

    /**
     * Sets cust_contacts
     *
     * @param \CembraPay\RestApi\Model\CustContacts $cust_contacts cust_contacts
     *
     * @return $this
     */
    public function setCustContacts($cust_contacts)
    {
        $this->container['cust_contacts'] = $cust_contacts;

        return $this;
    }

    /**
     * Gets delivery_details
     *
     * @return \CembraPay\RestApi\Model\DeliveryDetails
     */
    public function getDeliveryDetails()
    {
        return $this->container['delivery_details'];
    }

    /**
     * Sets delivery_details
     *
     * @param \CembraPay\RestApi\Model\DeliveryDetails $delivery_details delivery_details
     *
     * @return $this
     */
    public function setDeliveryDetails($delivery_details)
    {
        $this->container['delivery_details'] = $delivery_details;

        return $this;
    }

    /**
     * Gets merchant_order_ref
     *
     * @return string
     */
    public function getMerchantOrderRef()
    {
        return $this->container['merchant_order_ref'];
    }

    /**
     * Sets merchant_order_ref
     *
     * @param string $merchant_order_ref Order reference in Merchants system. Field value is not case-sensitive.
     *
     * @return $this
     */
    public function setMerchantOrderRef($merchant_order_ref)
    {
        $this->container['merchant_order_ref'] = $merchant_order_ref;

        return $this;
    }

    /**
     * Gets psp_transaction_id
     *
     * @return string
     */
    public function getPspTransactionId()
    {
        return $this->container['psp_transaction_id'];
    }

    /**
     * Sets psp_transaction_id
     *
     * @param string $psp_transaction_id Id of transaction in PSP system. Must be provided by PSP, when communication with api is made through PSP.
     *
     * @return $this
     */
    public function setPspTransactionId($psp_transaction_id)
    {
        $this->container['psp_transaction_id'] = $psp_transaction_id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \CembraPay\RestApi\Model\Order
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \CembraPay\RestApi\Model\Order $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets session_info
     *
     * @return \CembraPay\RestApi\Model\SessionInfo
     */
    public function getSessionInfo()
    {
        return $this->container['session_info'];
    }

    /**
     * Sets session_info
     *
     * @param \CembraPay\RestApi\Model\SessionInfo $session_info session_info
     *
     * @return $this
     */
    public function setSessionInfo($session_info)
    {
        $this->container['session_info'] = $session_info;

        return $this;
    }

    /**
     * Gets cembra_pay_details
     *
     * @return \CembraPay\RestApi\Model\CembraPayDetails
     */
    public function getCembraPayDetails()
    {
        return $this->container['cembra_pay_details'];
    }

    /**
     * Sets cembra_pay_details
     *
     * @param \CembraPay\RestApi\Model\CembraPayDetails $cembra_pay_details cembra_pay_details
     *
     * @return $this
     */
    public function setCembraPayDetails($cembra_pay_details)
    {
        $this->container['cembra_pay_details'] = $cembra_pay_details;

        return $this;
    }

    /**
     * Gets merchant_details
     *
     * @return \CembraPay\RestApi\Model\ScreeningMerchantDetails
     */
    public function getMerchantDetails()
    {
        return $this->container['merchant_details'];
    }

    /**
     * Sets merchant_details
     *
     * @param \CembraPay\RestApi\Model\ScreeningMerchantDetails $merchant_details merchant_details
     *
     * @return $this
     */
    public function setMerchantDetails($merchant_details)
    {
        $this->container['merchant_details'] = $merchant_details;

        return $this;
    }

    /**
     * Gets customer_consents
     *
     * @return \CembraPay\RestApi\Model\ScreeningCustomerConsent[]
     */
    public function getCustomerConsents()
    {
        return $this->container['customer_consents'];
    }

    /**
     * Sets customer_consents
     *
     * @param \CembraPay\RestApi\Model\ScreeningCustomerConsent[] $customer_consents customer_consents
     *
     * @return $this
     */
    public function setCustomerConsents($customer_consents)
    {
        $this->container['customer_consents'] = $customer_consents;

        return $this;
    }

    /**
     * Gets cust_details
     *
     * @return \CembraPay\RestApi\Model\RequiredCustDetails
     */
    public function getCustDetails()
    {
        return $this->container['cust_details'];
    }

    /**
     * Sets cust_details
     *
     * @param \CembraPay\RestApi\Model\RequiredCustDetails $cust_details cust_details
     *
     * @return $this
     */
    public function setCustDetails($cust_details)
    {
        $this->container['cust_details'] = $cust_details;

        return $this;
    }

    /**
     * Gets msg_extensions
     *
     * @return \CembraPay\RestApi\Model\MsgExtension[]
     */
    public function getMsgExtensions()
    {
        return $this->container['msg_extensions'];
    }

    /**
     * Sets msg_extensions
     *
     * @param \CembraPay\RestApi\Model\MsgExtension[] $msg_extensions List of additional data entries. Only known Keys will be processed. Prior agreement with CembraPay required about data structure and usage
     *
     * @return $this
     */
    public function setMsgExtensions($msg_extensions)
    {
        $this->container['msg_extensions'] = $msg_extensions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
