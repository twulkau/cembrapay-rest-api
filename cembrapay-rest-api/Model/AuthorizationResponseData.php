<?php
/**
 * AuthorizationResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  CembraPay\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transactions Gateway Microservice API
 *
 * Public JSON API integration and operations
 *
 * OpenAPI spec version: 1.0
 * Contact: integration@cembrapay.ch
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CembraPay\RestApi\Model;

use \ArrayAccess;
use \CembraPay\RestApi\ObjectSerializer;

/**
 * AuthorizationResponseData Class Doc Comment
 *
 * @category Class
 * @description Details of processed authorization (AUT).
 * @package  CembraPay\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthorizationResponseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuthorizationResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorization_valid_till' => '\DateTime',
        'authorized_remaining_amount' => 'double',
        'authorization_currency' => 'string',
        'authorized_payment_method' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorization_valid_till' => 'date-time',
        'authorized_remaining_amount' => 'double',
        'authorization_currency' => null,
        'authorized_payment_method' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_valid_till' => 'authorizationValidTill',
        'authorized_remaining_amount' => 'authorizedRemainingAmount',
        'authorization_currency' => 'authorizationCurrency',
        'authorized_payment_method' => 'authorizedPaymentMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_valid_till' => 'setAuthorizationValidTill',
        'authorized_remaining_amount' => 'setAuthorizedRemainingAmount',
        'authorization_currency' => 'setAuthorizationCurrency',
        'authorized_payment_method' => 'setAuthorizedPaymentMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_valid_till' => 'getAuthorizationValidTill',
        'authorized_remaining_amount' => 'getAuthorizedRemainingAmount',
        'authorization_currency' => 'getAuthorizationCurrency',
        'authorized_payment_method' => 'getAuthorizedPaymentMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorization_valid_till'] = isset($data['authorization_valid_till']) ? $data['authorization_valid_till'] : null;
        $this->container['authorized_remaining_amount'] = isset($data['authorized_remaining_amount']) ? $data['authorized_remaining_amount'] : null;
        $this->container['authorization_currency'] = isset($data['authorization_currency']) ? $data['authorization_currency'] : null;
        $this->container['authorized_payment_method'] = isset($data['authorized_payment_method']) ? $data['authorized_payment_method'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_valid_till
     *
     * @return \DateTime
     */
    public function getAuthorizationValidTill()
    {
        return $this->container['authorization_valid_till'];
    }

    /**
     * Sets authorization_valid_till
     *
     * @param \DateTime $authorization_valid_till DateTime when Authorization will be expired. Settlements/Cancellations are accepted only for Valid (not expired) authorizations. Authorization is valid for a preconfigured number of days from Authorization created. AuthorizationValidTill will be only returned if AuthorizationRemainingAmount > 0. ISO8601 Date with time in format 'yyyy-MM-ddTHH:mm:ssZ'.
     *
     * @return $this
     */
    public function setAuthorizationValidTill($authorization_valid_till)
    {
        $this->container['authorization_valid_till'] = $authorization_valid_till;

        return $this;
    }

    /**
     * Gets authorized_remaining_amount
     *
     * @return double
     */
    public function getAuthorizedRemainingAmount()
    {
        return $this->container['authorized_remaining_amount'];
    }

    /**
     * Sets authorized_remaining_amount
     *
     * @param double $authorized_remaining_amount Amount must be in smallest money unit for the Currency (cents for CHF). Required for SCR, AUT, REG, CHK, SET, CAN, CNT, CFM.
     *
     * @return $this
     */
    public function setAuthorizedRemainingAmount($authorized_remaining_amount)
    {
        $this->container['authorized_remaining_amount'] = $authorized_remaining_amount;

        return $this;
    }

    /**
     * Gets authorization_currency
     *
     * @return string
     */
    public function getAuthorizationCurrency()
    {
        return $this->container['authorization_currency'];
    }

    /**
     * Sets authorization_currency
     *
     * @param string $authorization_currency Currency, ISO4217 3 letters.
     *
     * @return $this
     */
    public function setAuthorizationCurrency($authorization_currency)
    {
        $this->container['authorization_currency'] = $authorization_currency;

        return $this;
    }

    /**
     * Gets authorized_payment_method
     *
     * @return string
     */
    public function getAuthorizedPaymentMethod()
    {
        return $this->container['authorized_payment_method'];
    }

    /**
     * Sets authorized_payment_method
     *
     * @param string $authorized_payment_method Payment method, wihch is authorized by CembraPay. In some cases risk owner can be changed to risk on Merchant and in this case transaction will have much shorter expiration untill purchase is confirmed via Confirmation request or via subsequent settlement.
     *
     * @return $this
     */
    public function setAuthorizedPaymentMethod($authorized_payment_method)
    {
        $this->container['authorized_payment_method'] = $authorized_payment_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
